package leet.interview;

public class Solution65 {
    public static void main(String[] args) {
        int a = 11;
        int b = 99;
        System.out.println(add(a, b));
    }

    public static int add(int a, int b) {
        if (a == 0) return b;
        if (b == 0) return a;

        return add(a ^ b, (a & b) << 1);
    }

    /**
     * 如果是十进制的话，我们是如何完成加法计算的？
     * exp: 99 + 111 = ？
     * 1. 个、十、百位 的数字分别相加先不管进位的问题：
     *      个位：9 + 1 = 0
     *      十位：9 + 1 = 0
     *      百位：0 + 1 = 1
     *      得到临时结果：100
     * 2. 计算进位的数字：
     *      1 + 9 = 10;
     *      10 + 90 = 100;
     *      得到进位结果：110
     * 3. 相加得到结果
     *     100 + 110 = 210
     *
     * exp2:
     * 12 二进制：1100
     * 15 二进制：1111
     *
     * 1. 各位置上的数字分别相加先不管进位的问题：
     *      1100 + 1111 = 0011
     *      得到临时二进制结果：0011
     * 2. 计算进位的数字:
     *      0100 + 0100 = 1000
     *      1000 + 1000 = 10000
     *      得到进位结果：11000
     * 3. 相加得到结果
     *      0011 + 11000 = 11011（十进制：27）正确！
     *
     * 问题2：第一步骤不用加法如何得到相同结果？异或: a ^ b --> 1100 ^ 1111 = 0011
     * 问题3：第二步骤不用加法如何得到相同结果？**相与，左移一位**:
     * >>如果一个位置上的数字相遇能得到 1 ，那么表示，位置上的数字都是1，然后在往左移动一位，就是步骤二 进位得到的结果: -->
     * >>> (1100 & 1111) << 1 = 11000
     *
     * @param a
     * @param b
     * @return
     */
    public static int add2(int a, int b) {
        if (a == 0) return b;
        if (b == 0) return a;

        //根据条件进位的结果为0的情况 进行判断停止
        while (b != 0) {
            int sum1 = a ^ b;//sum1代表不进位的加法
            int sum2 = (a & b) << 1;//sum2代表计算进位的数字

            //将这两个部分求和
            a = sum1;
            b = sum2;
        }
        return a;
    }

}
